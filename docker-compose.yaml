version: '3.8'
services:
  jenkins:
    build: .
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      DOCKER_HOST: tcp://dind:2375
      DOCKER_TLS_VERIFY: ""    
    depends_on:
      - dind
      - sonarqube
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - jenkins-network

  dind:
    image: docker:24.0-dind
    container_name: dind
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ""   
    command: ["--host=tcp://0.0.0.0:2375", "--host=unix:///var/run/docker.sock"]
    volumes:
      - dind_data:/var/lib/docker
    networks:
      - jenkins-network

  sonarqube:
    image: sonarqube:10.2-community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - jenkins-network

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonar"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - jenkins-network

volumes:
  jenkins_home:
    external: true
  dind_data:
    external: true
  sonarqube_data:
    external: true
  sonarqube_extensions:
    external: true
  sonarqube_logs:
    external: true
  postgresql_data:
    external: true

networks:
  jenkins-network:
    driver: bridge